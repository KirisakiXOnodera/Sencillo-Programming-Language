#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void detectTokens(char* str);
bool isValidDelimiter(char ch);
bool isValidOperator(char ch);
bool isvalidIdentifier(char* str);
bool isValidKeyword(char* mainStr);
bool isValidInteger(char* str);
bool isRealNumber(char* str);
char* subString(char* str, int left, int right);

bool isValidReservedword(char* mainStr);
bool isValidNoiseword(char* mainStr);
int identifyOperator(char* str, int right);
void identifyDelimiter(char ch);
void identifyKeyword(char* mainStr);
bool isaDigit(char ch);

void identifyCharacterLit(char* subStr, int right); // to delete


char *token;

int main(){
    char str[500] ="930232 34.34 0.3.0 2.2323.232 87634 345.4 = += -=  *=  /=  %=  //= ++ -- + - * / % ** //  == != > y ni no < >= <= bool cuer dec descanso doble ent escan flot hacer impri mas mientras ni no perso por retorno sequir si vacio vamos y falso verdad booleano decontra personaje entero escanear flotar cuerda imprimir";
    printf("The Program is : '%s' \n", str);
    printf("All Tokens are : \n");
    detectTokens(str);
    return (0);
}

void detectTokens(char* str) {
    int left = 0, right = 0;
    int length = strlen(str);

    while (right <= length && left <= right) {

        // COMMENT
        if(str[right] == '/' && str[right+1] == '*'){
            right+=2;

            char c[2] = "";
            char subs[100] = "";

            // string inside the /* */ will be stored in subs variable one by one using strcat
            while(str[right] != '*' && str[right+1] != '/'){
                c[0] = str[right];
                strcat(subs,c);
                right++;
            }
            printf("Comment : %s\n", subs);
            right+=2;
            left = right;
            // when we already extracted a lexeme, we want the left value to keep
        }

        // CHARACTER LITERAL
        if(str[right] == '\''){
            char c[2] = "";
            char subs[300] = ""; // stores the char literal

            // if ch='' or empty character literal
            if(str[right+1] == '\''){
                right++;
                printf("! invalid empty character literal: %s\n", subs);
            }
            // if the third character is not '
            else if(str[right+2] != '\'') {
                right++;

                // gets values between ' '
                while(str[right] != '\''){
                    c[0] = str[right];
                    strcat(subs,c);
                    right++;
                }
                printf("! invalid character literal: %s\n", subs);
            }
            // normal character
            else{
                right++;
                c[0] = str[right];
                strcat(subs,c);
                printf("Character Literal : %s\n", subs);
                right++;
            }

            right++;
            left = right;
        }

        // STRING LITERAL
        if(str[right] == '\"'){
            right++;
            char c[2] = "";
            char subs[300] = ""; // stores the char literal

            // gets values between " "
            while(str[right] != '\"'){
                c[0] = str[right];
                strcat(subs,c);
                right++;
            }
            printf("String literal: %s\n", subs);

            right++;
            left = right;

        }


        // checks if character is NOT a delimiter
        // if not a delimiter then proceed to evaluating the next character
        if (isValidDelimiter(str[right]) == false){ // (!isValidDelimiter(str[right]))
            right++;
        }

        // if char is a delimiter AND left == right
        if (isValidDelimiter(str[right]) == true && left == right) {
            // OPERATOR
            if (isValidOperator(str[right]) == true){
                // gives new right value, index after the operator is evaluated
                int newRight = identifyOperator(str,right);
                right = newRight;
            }
            // IDENTIFY DELIMITER
            else{
                if(str[right] != ' '){
                    identifyDelimiter(str[right]);
                }
                right++;
            }

            left = right;
        }

        // if char is delimiter AND left != right
        // or if right == length AND left != right
        else if ((isValidDelimiter(str[right]) == true && left != right) || (right == length && left != right)) {
            char* subStr = subString(str, left, right - 1);

            if (isValidKeyword(subStr) == true)
                printf("Valid Keyword : %s\t%s\n", subStr,token);
            else if (isValidReservedword(subStr) == true)
                printf("Valid Reserved Word : %s\t%s\n", subStr,token);
            else if (isValidNoiseword(subStr) == true)
                printf("Valid Noiseword : %s\t%s\n", subStr,token);
            else if (isValidInteger(subStr) == true)
                printf("Valid Integer : %s\t%s\n", subStr, token);
            else if (isRealNumber(subStr) == true)
                printf("Real Number : %s\t%s\n", subStr,token);
            else if (isvalidIdentifier(subStr) == true && isValidDelimiter(str[right - 1]) == false)
                printf("Valid Identifier : %s\n", subStr);
            else if (isvalidIdentifier(subStr) == false && isValidDelimiter(str[right - 1]) == false)
                printf("Invalid Identifier : %s\n", subStr);
            else{
                printf("! unknown : %s\n", subStr);
            }


                left = right;
        }
   }
   return;
}

bool isValidDelimiter(char ch) {
   if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
   ch == '/' || ch == ',' || ch == ';' || ch == '>' ||
   ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
   ch == '[' || ch == ']' || ch == '{' || ch == '}' || ch == ':'||
   ch == '%'|| ch == '!' || ch == '\n')
   return (true);
   return (false);
}

void identifyDelimiter(char ch){
    if(ch == '('){
        token = "(";
    }
    else if(ch == ')'){
        token = ")";
    }
    else if(ch == '['){
        token = "[";
    }
    else if(ch == ']'){
        token = "]";
    }
    else if(ch == '{'){
        token = "{";
    }
    else if(ch == '}'){
        token = "}";
    }
    else if(ch == ';'){
        token = ";";
    }
    else if(ch == ','){
        token = ",";
    }
    else if(ch == ':'){
        token = ":";
    }

    printf("Delimiter : %c\t%s\n", ch, token);
}

bool isValidOperator(char ch){
    char operatorList[]={'=','+','-','*','/','%','!','>','<','\0'};
    int i=0;
    while(i < strlen(operatorList)){
        if(ch == operatorList[i]){
            return (true);
        }
        i++;
    }
    return (false);
}

int identifyOperator(char* str, int right){
    char c[2]="";
    char mainStr[100]="";

    while (isValidOperator(str[right])){
        c[0] = str[right];
        strcat(mainStr,c);
        right++;
    }

    // arithmetic operator

    if(mainStr[0] == '+' && mainStr[1] == '\0'){
        token = "+";
    }
    else if(mainStr[0] == '-' && mainStr[1] == '\0'){
        token = "-";
    }
    else if(mainStr[0] == '/' && mainStr[1] == '\0'){
        token = "/";
    }
    else if(mainStr[0] == '*' && mainStr[1] == '\0'){
        token = "*";
    }
    else if(mainStr[0] == '%' && mainStr[1] == '\0'){
        token = "%";
    }
    else if(mainStr[0] == '*' && mainStr[1] == '*' && mainStr[2] == '\0'){
        token = "**";
    }
    else if(mainStr[0] == '/' && mainStr[1] == '/' && mainStr[2] == '\0'){
        token = "//";
    }

    // assignment operator

    else if(mainStr[0] == '=' && mainStr[1] == '\0'){
        token = "=";
    }
    else if(mainStr[0] == '+' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "+=";
    }
    else if(mainStr[0] == '-' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "-=";
    }
    else if(mainStr[0] == '*' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "*=";
    }
    else if(mainStr[0] == '%' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "%=";
    }
    else if(mainStr[0] == '/' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "/=";
    }
    else if(mainStr[0] == '/' && mainStr[1] == '/' && mainStr[2] == '=' && mainStr[3] == '\0'){
        token = "//=";
    }

    // increment & decrement

    else if(mainStr[0] == '+' && mainStr[1] == '+' && mainStr[2] == '\0'){
        token = "++";
    }
    else if(mainStr[0] == '-' && mainStr[1] == '-' && mainStr[2] == '\0'){
        token = "--";
    }

    // boolean relational

    else if(mainStr[0] == '=' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "==";
    }
    else if(mainStr[0] == '!' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "!=";
    }
    else if(mainStr[0] == '>' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = ">=";
    }
    else if(mainStr[0] == '<' && mainStr[1] == '=' && mainStr[2] == '\0'){
        token = "<=";
    }
    else if(mainStr[0] == '>' && mainStr[1] == '\0'){
        token = ">";
    }
    else if(mainStr[0] == '<' && mainStr[1]  == '\0'){
        token = "<";
    }
    else{
        token = "invalid operator";
    }
    printf("Operator : %s\t%s\n", mainStr, token);

    return right;
}

// to delete
void identifyCharacterLit(char* str, int right){
    char c[2] = "";
    char subs[300] = ""; // stores the char literal

    // if ch ='' or empty character constant
    if(str[right+1] == '\''){
        printf("! invalid empty character literal: %s\n", subs);
    }
    // if the third character is not '
    else if(str[right+2] != '\'') {
        int i = right + 1;

        // gets values between ' '
        while(str[i] != '\''){
            c[0] = str[i];
            strcat(subs,c);
            i++;
        }
        printf("! invalid character literal: %s\n", subs);
    }
    // normal character
    else{
        printf("Character Literal : %c\n", str[1]);
    }
}

// Returns 'true' if the string is a VALID IDENTIFIER.
bool isvalidIdentifier(char* str){
   if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
   str[0] == '3' || str[0] == '4' || str[0] == '5' ||
   str[0] == '6' || str[0] == '7' || str[0] == '8' ||
   str[0] == '9' || isValidDelimiter(str[0]) == true)
   return (false);
   return (true);
}

bool isValidKeyword(char* mainStr) {

    if(mainStr[0] == 'b' && mainStr[1] == 'o' && mainStr[2] == 'o' && mainStr[3] == 'l' && mainStr[4] == '\0'){
        token = "boolean_keyword";
        return (true);
    }
    else if(mainStr[0] == 'c' && mainStr[1] == 'u' && mainStr[2] == 'e' && mainStr[3] == 'r' && mainStr[4] == '\0'){
        token = "string_keyword";
        return (true);
    }
    else if(mainStr[0] == 'd' && mainStr[1] == 'e' && mainStr[2] == 'c' && mainStr[3] == '\0'){
        token = "elif_keyword";
        return (true);
    }
    else if(mainStr[0] == 'd' && mainStr[1] == 'e' && mainStr[2] == 's' && mainStr[3] == 'c' &&
            mainStr[4] == 'a' && mainStr[5] == 'n' && mainStr[6] == 's' && mainStr[7] == 'o' && mainStr[8] == '\0'){
        token = "break_keyword";
        return (true);
    }
    else if(mainStr[0] == 'd' && mainStr[1] == 'o' && mainStr[2] == 'b' && mainStr[3] == 'l' &&
            mainStr[4] == 'e' && mainStr[5] == '\0'){ // doble
        token = "double_keyword";
        return (true);
    }
    else if(mainStr[0] == 'e' && mainStr[1] == 'n' && mainStr[2] == 't' && mainStr[3] == '\0'){
        token = "integer_keyword";
        return (true);
    }
    else if(mainStr[0] == 'e' && mainStr[1] == 's' && mainStr[2] == 'c' && mainStr[3] == 'a' && mainStr[4] == 'n' &&
            mainStr[5] == '\0'){
        token = "scanf_keyword";
        return (true);
    }
    else if(mainStr[0] == 'f' && mainStr[1] == 'l' && mainStr[2] == 'o' && mainStr[3] == 't' && mainStr[4] == '\0'){
        token = "float_keyword";
        return (true);
    }
    else if(mainStr[0] == 'h' && mainStr[1] == 'a' && mainStr[2] == 'c' && mainStr[3] == 'e' &&
            mainStr[4] == 'r' && mainStr[5] == '\0'){
        token = "do_keyword";
        return (true);
    }
    else if(mainStr[0] == 'i' && mainStr[1] == 'm' && mainStr[2] == 'p' && mainStr[3] == 'r' && mainStr[4] == 'i' &&
            mainStr[5] == '\0'){
        token = "printf_keyword";
        return (true);
    }
    else if(mainStr[0] == 'm' && mainStr[1] == 'a' && mainStr[2] == 's' && mainStr[3] == '\0'){
        token = "else_keyword";
        return (true);
    }
    else if(mainStr[0] == 'm' && mainStr[1] == 'i' && mainStr[2] == 'e' && mainStr[3] == 'n' &&
            mainStr[4] == 't' && mainStr[5] == 'r' && mainStr[6] == 'a' && mainStr[7] == 's' && mainStr[8] == '\0'){
        token = "while_keyword";
        return (true);
    }
    else if(mainStr[0] == 'p' && mainStr[1] == 'e' && mainStr[2] == 'r' && mainStr[3] == 's' && mainStr[4] == 'o' &&
            mainStr[5] == '\0'){
        token = "char_keyword";
        return (true);
    }
    else if(mainStr[0] == 'p' && mainStr[1] == 'o' && mainStr[2] == 'r' && mainStr[3] == '\0'){
        token = "for_keyword";
        return (true);
    }
    else if(mainStr[0] == 'r' && mainStr[1] == 'e' && mainStr[2] == 't' && mainStr[3] == 'o' &&
            mainStr[4] == 'r' && mainStr[5] == 'n' && mainStr[6] == 'o' && mainStr[7] == '\0'){
        token = "return_keyword";
        return (true);
    }
    else if(mainStr[0] == 's' && mainStr[1] == 'e' && mainStr[2] == 'q' && mainStr[3] == 'u' && mainStr[4] == 'i' &&
            mainStr[5] == 'r' && mainStr[6] == '\0'){
        token = "continue_keyword";
        return (true);
    }
    else if(mainStr[0] == 's' && mainStr[1] == 'i' && mainStr[2] == '\0'){
        token = "if_keyword";
        return (true);
    }
    else if(mainStr[0] == 'v' && mainStr[1] == 'a' && mainStr[2] == 'c' && mainStr[3] == 'i' && mainStr[4] == 'o' &&
            mainStr[5] == '\0'){
        token = "void_keyword";
        return (true);
    }
    else if(mainStr[0] == 'v' && mainStr[1] == 'a' && mainStr[2] == 'm' && mainStr[3] == 'o' && mainStr[4] == 's' &&
            mainStr[5] == '\0'){
        token = "goto_keyword";
        return (true);
    }

    // boolean

    else if(mainStr[0] == 'y' && mainStr[1] ==  '\0' ){
        token = "and_op";
        return (true);
    }
    else if(mainStr[0] == 'n' && mainStr[1] == 'i' && mainStr[2] == '\0'){
        token = "or_op";
        return (true);
    }
    else if(mainStr[0] == 'n' && mainStr[1] == 'o' && mainStr[2] == '\0'){
        token = "not_op";
        return (true);
    }

    else
        return (false);
}

bool isValidReservedword(char* mainStr){
    if(mainStr[0] == 'f' && mainStr[1] == 'a' && mainStr[2] == 'l' && mainStr[3] == 's' && mainStr[4] == 'o' &&
            mainStr[5] == '\0'){
        token = "false_reserved";
        return (true);
    }
    else if(mainStr[0] == 'v' && mainStr[1] == 'e' && mainStr[2] == 'r' && mainStr[3] == 'd' && mainStr[4] == 'a' &&
            mainStr[5] == 'd' && mainStr[6] == '\0'){
        token = "true_reserved";
        return (true);
    }
    else
        return (false);
}

bool isValidNoiseword(char* mainStr){
    if(mainStr[0] == 'b' && mainStr[1] == 'o' && mainStr[2] == 'o' && mainStr[3] == 'l' && mainStr[4] == 'e' &&
        mainStr[5] == 'a' && mainStr[6] == 'n' && mainStr[7] == 'o' && mainStr[8] == '\0'){
        token = "boolean_noiseword";
        return (true);
    }

    else if(mainStr[0] == 'c' && mainStr[1] == 'u' && mainStr[2] == 'e' && mainStr[3] == 'r' && mainStr[4] == 'd' &&
            mainStr[5] == 'a' && mainStr[6] == '\0'){
        token = "string_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'd' && mainStr[1] == 'e' && mainStr[2] == 'c' && mainStr[3] == 'o' && mainStr[4] == 'n' &&
        mainStr[5] == 't' && mainStr[6] == 'r' && mainStr[7] == 'a' && mainStr[8] == '\0'){
        token = "elif_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'e' && mainStr[1] == 'n' && mainStr[2] == 't' && mainStr[3] == 'e' &&
            mainStr[4] == 'r' && mainStr[5] == 'o' && mainStr[6] == '\0'){
        token = "integer_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'e' && mainStr[1] == 's' && mainStr[2] == 'c' && mainStr[3] == 'a' &&
            mainStr[4] == 'n' && mainStr[5] == 'e' && mainStr[6] == 'a' && mainStr[7] == 'r' && mainStr[8] == '\0'){
        token = "scanf_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'f' && mainStr[1] == 'l' && mainStr[2] == 'o' && mainStr[3] == 't' && mainStr[4] == 'a' &&
            mainStr[5] == 'r' && mainStr[6] == '\0'){
        token = "float_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'i' && mainStr[1] == 'm' && mainStr[2] == 'p' && mainStr[3] == 'r' &&
            mainStr[4] == 'i' && mainStr[5] == 'm' && mainStr[6] == 'i' && mainStr[7] == 'r' && mainStr[8] == '\0'){
        token = "printf_noiseword";
        return (true);
    }
    else if(mainStr[0] == 'p' && mainStr[1] == 'e' && mainStr[2] == 'r' &&
            mainStr[3] == 's' && mainStr[4] == 'o' && mainStr[5] == 'n' && mainStr[6] == 'a' &&
            mainStr[7] == 'j' && mainStr[8] == 'e' && mainStr[9] == '\0'){
        token = "char_noiseword";
        return (true);
    }
    else
        return (false);
}

bool isValidInteger(char* str) {
    for(int i = 0; i < strlen(str); i++){
        if(isaDigit(str[i]) == false)
            return (false);
    }

    token = "int_literal";
    return (true);
}

bool isaDigit(char ch){
    char digitList[] = {'0','1','2','3','4','5','6','7','8','9'};

    for(int i = 0; i < strlen(digitList); i++){
        if(ch == digitList[i]){
            return (true);
        }
    }
    return (false);
    /*
        gets every element in digitList, compares it to the digit stored in ch variable
        if a similar element/digit is found, then return true
        if the loop ends but no element is similar, then return false
    */
}

bool isRealNumber(char* str) {
    for(int i = 0; i < strlen(str); i++){
        if(isaDigit(str[i]) == false && str[i] != '.')
            return (false);
    }

    int count = 0;

    for(int i = 0; i < strlen(str); i++){
        if(str[i] == '.')
            count++;
    }

    if(count > 1){
        token = "invalid float_literal";
    }
    else{
        token = "float_literal";
    }

    return (true);
    /*
        if a character in the substring is neither a digit nor a '.', then return false
    */
}

char* subString(char* str, int left, int right) {
   int i;
   char* subStr = (char*)malloc( sizeof(char) * (right - left + 2));
   for (i = left; i <= right; i++)
   subStr[i - left] = str[i];
   subStr[right - left + 1] = '\0';
   return (subStr);
}


