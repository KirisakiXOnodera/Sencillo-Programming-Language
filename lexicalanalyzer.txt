#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

// global variables
char program[200];
char inputIndex = 0;
char mainStr[100]; // consider string literal
char charClass[15] = "ALPHABET";

char *lexeme[100];
int lexIndex = 0;

char token[20];

bool isAlphabet(char currentChar){
    int i=0;
    bool result = false;

    char letterList[]={'a','b','c','d','e','f','g','h','i','j','k','l','m',
                        'n','o','p','q','r','s','t','u','v','w','x','y','z',
                        'A','B','C','D','E','F','G','H','I','J','K','L','M',
                        'N','O','P','Q','R','S','T','U','V','W','X','Y','Z','_','\0'};
    while(i < strlen(letterList)){   //53
        if(currentChar == letterList[i]){
            result = true;
            break;
        }
        i++;
    }
    
    return result;    
}

bool isIntLiteral(char currentChar){
    int i=0;
    bool result = false;

    char digitList[]={'0','1','2','3','4','5','6','7','8','9','.','\0'};
    
    while(i < strlen(digitList)){   
        if(currentChar == digitList[i]){
            result = true;
            break;
        }
        i++;
    }
    return result; 
}

bool isOperator(char currentChar){
    int i=0;
    bool result = false;

    char operatorList[]={'=','+','-','*','/','%','!','>','<','\0'};
    
    while(i < strlen(operatorList)){   
        if(currentChar == operatorList[i]){
            result = true;
            break;
        }
        i++;
    }
    return result;     
}

bool isDelimiter(char currentChar){
    int i=0;
    bool result = false;

    char delimiterList[]={'(',')','{','}','[',']',',',':',';','\0'};
    
    while(i < strlen(delimiterList)){   
        if(currentChar == delimiterList[i]){
            result = true;
            break;
        }
        i++;
    }
    return result;     
}

void getClass(){
    if(mainStr[0] == 'b' && mainStr[1] == 'o' && mainStr[2] == 'o' && mainStr[3] == 'l' && mainStr[4] == NULL){
        strcpy(token,"boolean_keyword");
    }
    else if(mainStr[0] == 'c' && mainStr[1] == 'u' && mainStr[2] == 'e' && mainStr[3] == 'r' && mainStr[4] == NULL){
        strcpy(token,"string_keyword");
    }  
    else if(mainStr[0] == 'd' && mainStr[1] == 'e' && mainStr[2] == 'c' && mainStr[3] == NULL){
        strcpy(token,"elif_keyword");
    }
    else if(mainStr[0] == 'd' && mainStr[1] == 'e' && mainStr[2] == 's' && mainStr[3] == 'c' &&
            mainStr[4] == 'a' && mainStr[5] == 'n' && mainStr[6] == 's' && mainStr[7] == 'o' && mainStr[8] == NULL){
        strcpy(token,"break_keyword");
    }  
    else if(mainStr[0] == 'd' && mainStr[1] == 'o' && mainStr[2] == 'b' && mainStr[3] == 'l' &&
            mainStr[4] == 'e' && mainStr[5] == NULL){
        strcpy(token,"double_keyword");
    }    
    else{
        strcpy(token,"identifier");
    }
    
}

void evalChar(char x){    // gets character class
    char currentChar[1];
    currentChar[0] = x;
    char str_c[2] = "";  
    char str_literal[100] = "";   
    
    char comment_c[2] = ""; 
    char comment_str[100] = "";  
    
    if(isAlphabet(currentChar[0])){
        //printf("alphabet %c\n", currentChar[0]);
        if(strcmp(charClass,"ALPHABET") == 0){
            strcat(mainStr, currentChar);
        }
        else{
            getClass();
            lexeme[lexIndex] = mainStr; // string to string array
            printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
            lexIndex++;
            strcpy(mainStr,currentChar);
            strcpy(charClass,"ALPHABET");
        }
        
    }
    
    else if(isIntLiteral(currentChar[0])){
        // printf("int literal %c\n", currentChar[0]);
        
        if(strcmp(charClass,"INT_LITERAL") == 0){
            strcat(mainStr, currentChar);
        }
        else{
            getClass();
            lexeme[lexIndex] = mainStr; 
            printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
            lexIndex++;
            strcpy(mainStr,currentChar);
            strcpy(charClass,"INT_LITERAL");
        }
    }
    
    else if(isOperator(currentChar[0])){
        // printf("operator %c\n", currentChar[0]);
        if(strcmp(charClass,"OPERATOR") == 0){
            strcat(mainStr, currentChar);
        }
        else{
            getClass();
            lexeme[lexIndex] = mainStr; 
            printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
            lexIndex++;
            strcpy(mainStr,currentChar);
            strcpy(charClass,"OPERATOR");
        }        
    }
    
    else if(isDelimiter(currentChar[0])){
        // printf("delimiter %c\n", currentChar[0]);
        getClass();
        lexeme[lexIndex] = mainStr; 
        printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
        lexIndex++;
        strcpy(mainStr,currentChar);
        strcpy(charClass,"DELIMITER");
    }
    
    else if(currentChar[0] == '\"'){
        getClass();
        lexeme[lexIndex] = mainStr; 
        printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
        lexIndex++;
        
        inputIndex++;
        
        if(program[inputIndex] == '\"'){
            // str ="":
            // remove if necessary
        }
        else{
            while(program[inputIndex] != '\"'){
                str_c[0] = program[inputIndex];
                strcat(str_literal,str_c); 
                inputIndex++;
            }     
            strcpy(mainStr,str_literal);
            strcpy(charClass,"STR_LITERAL");
        }
        // printf("string literal %s\n", str_literal);
    }
    
    else if(currentChar[0] == '\''){
        getClass();
        lexeme[lexIndex] = mainStr; 
        printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
        lexIndex++;
        
        inputIndex++;
        
        char c_literal[2] = "";
        c_literal[0] = program[inputIndex];
        
        strcpy(mainStr, c_literal);
        strcpy(charClass,"CHAR_LITERAL");
        
        inputIndex++;
    }  
    
    else if(currentChar[0] == ' '){
        //printf("space \n");
        strcpy(charClass,"BLANK_SPACE");
    }
    
    else if(currentChar[0] == '#' && program[inputIndex+1] && program[inputIndex+2]){
        getClass();
        lexeme[lexIndex] = mainStr; 
        printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
        lexIndex++;
        
        // inputIndex+=2;   - Alternative

        strcat(comment_str,"#"); 
        inputIndex++;
        strcat(comment_str,"#");
        inputIndex++;
        strcat(comment_str,"#");
        
        inputIndex++;
        
        while(program[inputIndex] != '#'){
            comment_c[0] = program[inputIndex];
            strcat(comment_str,comment_c); 
            inputIndex++;
        }     
        
        strcat(comment_str,"#"); 
        inputIndex++;
        strcat(comment_str,"#");
        inputIndex++;
        strcat(comment_str,"#");
        
        // inputIndex+=2;       - Alternative
        
        strcpy(mainStr,comment_str);
        strcpy(charClass,"COMMENT");
    }

}

void myFunction(){   // gets input character
    while(inputIndex < strlen(program)){
        evalChar(program[inputIndex]);
        inputIndex++;
    }
    
    if(inputIndex == strlen(program)){
        getClass();
        lexeme[lexIndex] = mainStr; 
        printf("lexeme %d: %s %s\n",lexIndex, lexeme[lexIndex], token);
    }
    
}


int main()
{
    printf("Program: ");
    gets(program);
    printf("%s\n", program);
    myFunction();

    return 0;
}



