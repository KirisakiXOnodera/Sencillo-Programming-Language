lexeme 0: bool			boolean_keyword
lexeme 1: cuer			string_keyword
lexeme 2: dec			elif_keyword
lexeme 3: descanso			break_keyword
lexeme 4: doble			double_keyword
lexeme 5: ent			integer_keyword
lexeme 6: escan			scanf_keyword
lexeme 7: flot			float_keyword
lexeme 8: hacer			do_keyword
lexeme 9: impri			printf_keyword
lexeme 10: mas			else_keyword
lexeme 11: mientras			while_keyword
lexeme 12: ni			or_op
lexeme 13: no			not_op
lexeme 14: perso			char_keyword
lexeme 15: por			for_keyword
lexeme 16: retorno			return_keyword
lexeme 17: sequir			continue_keyword
lexeme 18: si			if_keyword
lexeme 19: vacio			void_keyword
lexeme 20: vamos			goto_keyword
lexeme 21: y			and_op
lexeme 22: falso			boolean_literal
lexeme 23: verdad			boolean_literal
lexeme 24: :			delimiter
lexeme 25: por			for_keyword
lexeme 26: (			delimiter
lexeme 27: ent			integer_keyword
lexeme 28: a			identifier
lexeme 29: =			assign_op
lexeme 30: 0			int_literal
lexeme 31: ;			delimiter
lexeme 32: a			identifier
lexeme 33: <			less_op
lexeme 34: 0			int_literal
lexeme 35: ;			delimiter
lexeme 36: a			identifier
lexeme 37: ++			increment_op
! unknown character: ?
! unknown character: ^
lexeme 38: )			delimiter
lexeme 39: {			delimiter
lexeme 40: cuer			string_keyword
lexeme 41: srt			identifier
lexeme 42: -=			subAssign_op
lexeme 43: y			str_literal
lexeme 44: :			delimiter
lexeme 45: perso			char_keyword
lexeme 46: ch			identifier
lexeme 47: *=			multAssign_op
lexeme 48: y			char_literal
lexeme 49: :			delimiter
lexeme 50: d			identifier
lexeme 51: +=			addAssign_op
lexeme 52: x			identifier
lexeme 53: :			delimiter
lexeme 54: }			delimiter
lexeme 55: commentint			comment
lexeme 56: +			add_op
lexeme 57: -			sub_op
lexeme 58: /			div_op
lexeme 59: *			mult_op
lexeme 60: **			expo_op
lexeme 61: //			intDiv_op
lexeme 62: %			mod_op
lexeme 63: =			assign_op
lexeme 64: +=			addAssign_op
lexeme 65: -=			subAssign_op
lexeme 66: /=			divAssign_op
lexeme 67: */			invalid operator
lexeme 68: //=			intDivAssign_op
lexeme 69: %=			modAssign_op
lexeme 70: <			less_op
lexeme 71: >			greater_op
lexeme 72: ==			equal_op
lexeme 73: !=			notEqual_op
lexeme 74: >=			goe_op
lexeme 75: <=			loe_op
lexeme 76: ++			increment_op
lexeme 77: --			decrement_op
