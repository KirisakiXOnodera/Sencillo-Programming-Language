lexeme 0: bool			boolean_keyword
lexeme 1: cuer			string_keyword
lexeme 2: dec			elif_keyword
lexeme 3: descanso			break_keyword
lexeme 4: doble			double_keyword
lexeme 5: ent			integer_keyword
lexeme 6: escan			scanf_keyword
lexeme 7: flot			float_keyword
lexeme 8: hacer			do_keyword
lexeme 9: impri			printf_keyword
lexeme 10: mas			else_keyword
lexeme 11: mientras			while_keyword
lexeme 12: ni			or_op
lexeme 13: no			not_op
lexeme 14: perso			char_keyword
lexeme 15: por			for_keyword
lexeme 16: retorno			return_keyword
lexeme 17: sequir			continue_keyword
lexeme 18: si			if_keyword
lexeme 19: vacio			void_keyword
lexeme 20: vamos			goto_keyword
lexeme 21: y			and_op
lexeme 22: falso			false_reserved
lexeme 23: verdad			true_reserved
lexeme 24: :			:
lexeme 25: por			for_keyword
lexeme 26: (			(
lexeme 27: ent			integer_keyword
lexeme 28: a			id
lexeme 29: =			=
lexeme 30: 0			int_literal
lexeme 31: ;			;
lexeme 32: a			id
lexeme 33: <			<
lexeme 34: 0			int_literal
lexeme 35: ;			;
lexeme 36: a			id
lexeme 37: ++			++
! unknown character: 	?
! unknown character: 	^
lexeme 38: )			)
lexeme 39: {			{
lexeme 40: cuer			string_keyword
lexeme 41: srt			id
lexeme 42: -=			-=
lexeme 43: y			str_literal
lexeme 44: :			:
lexeme 45: perso			char_keyword
lexeme 46: ch			id
lexeme 47: *=			*=
lexeme 48: y			char_literal
lexeme 49: :			:
lexeme 50: d			id
lexeme 51: +=			+=
lexeme 52: x			id
lexeme 53: :			:
lexeme 54: }			}
lexeme 55: commentint			comment
lexeme 56: +			+
lexeme 57: -			-
lexeme 58: /			/
lexeme 59: *			*
lexeme 60: **			**
lexeme 61: //			//
lexeme 62: %			%
lexeme 63: =			=
lexeme 64: +=			+=
lexeme 65: -=			-=
lexeme 66: /=			/=
lexeme 67: *=			*=
lexeme 68: //=			//=
lexeme 69: %=			%=
lexeme 70: <			<
lexeme 71: >			>
lexeme 72: ==			==
lexeme 73: !=			!=
lexeme 74: >=			>=
lexeme 75: <=			<=
lexeme 76: ++			++
lexeme 77: --			--
